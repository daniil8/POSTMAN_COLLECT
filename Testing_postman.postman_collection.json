{
	"info": {
		"_postman_id": "c963e02b-6cd6-4eee-b309-f189abfea8fe",
		"name": "Testing postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24261404"
	},
	"item": [
		{
			"name": "https://api.nasa.gov/planetary/apod?api_key=8Z6jwPfucmzzCCRxQWM7Fha7egMWGubnSUaHxzJD",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=8Z6jwPfucmzzCCRxQWM7Fha7egMWGubnSUaHxzJD&thumbs=true",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "8Z6jwPfucmzzCCRxQWM7Fha7egMWGubnSUaHxzJD"
						},
						{
							"key": "date",
							"value": "2022-11-05",
							"disabled": true
						},
						{
							"key": "thumbs",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://www.toptal.com/developers/postbin/1667645303341-4110985214356",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "2222",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/1667645303341-4110985214356",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"1667645303341-4110985214356"
					]
				}
			},
			"response": []
		},
		{
			"name": "www.toptal.com - get",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "2222",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/1667645868911-4581583668477",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"1667645868911-4581583668477"
					]
				}
			},
			"response": []
		},
		{
			"name": "www.toptal.com - post",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "2222",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"test\":\"value\"}"
				},
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/1667645868911-4581583668477",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"1667645868911-4581583668477"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://www.toptal.com/developers/postbin/api/bin",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/api/bin",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"api",
						"bin"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://www.toptal.com/developers/postbin/api/bin/1667645311858-6518857672344",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/api/bin/1667645311858-6518857672344",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"api",
						"bin",
						"1667645311858-6518857672344"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://stackoverflow.com/",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "stackoverflow.com"
					},
					{
						"key": "accept",
						"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
					},
					{
						"key": "accept-language",
						"value": "ru-RU,ru;q=0.9"
					},
					{
						"key": "cache-control",
						"value": "max-age=0"
					},
					{
						"key": "cookie",
						"value": "prov=4b80aa9f-7f19-3a10-3f9f-2efad0f35349"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Not;A=Brand\";v=\"99\", \"Chromium\";v=\"106\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"Windows\""
					},
					{
						"key": "sec-fetch-dest",
						"value": "document"
					},
					{
						"key": "sec-fetch-mode",
						"value": "navigate"
					},
					{
						"key": "sec-fetch-site",
						"value": "none"
					},
					{
						"key": "sec-fetch-user",
						"value": "?1"
					},
					{
						"key": "upgrade-insecure-requests",
						"value": "1"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36"
					}
				],
				"url": {
					"raw": "https://stackoverflow.com/",
					"protocol": "https",
					"host": [
						"stackoverflow",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "for test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct respose format JSON\r",
							"pm.test(\"Correct respose format JSON\",function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"We have all the declared fields in the response\",function() {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"})\r",
							"\r",
							"//3. Field value isn't NULL\r",
							"pm.test(\"Field value isn't NULL\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"})\r",
							"\r",
							"//4. Check if value ins't empty\r",
							"pm.test(\"Check if value ins't empty\",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"})\r",
							"\r",
							"//5.Check if field corresponds to a specific value\r",
							"pm.test(\".Check if field corresponds to a specific value\",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"})\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//7. Status message is OK\r",
							"pm.test(\"Status message is OK\",function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\",function(){\r",
							"    var timeJ = pm.response.responseTime;\r",
							"    pm.expect(timeJ).to.be.below(1000);\r",
							"})\r",
							"\r",
							"//9. There is a specific header in the response\r",
							"pm.test(\"9. There is a specific header in the response\",function(){\r",
							"    var head = pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"\r",
							"//10. The response has a cpecific header whith a specific value\r",
							"pm.test(\"10. The response has a cpecific header whith a specific value\",function(){\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\");\r",
							"})\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"11. Cookie exists\",function(){\r",
							"    pm.cookies.has(\"Cookie_3\"); // не правильно\r",
							"})\r",
							"\r",
							"//12 Cookie has value\r",
							"pm.test(\"12.Cookie has value\",function(){\r",
							"     try{\r",
							"         var MY_COOKIE = pm.cookies.get(\"Cookie_4\");\r",
							"         console.log(MY_COOKIE);\r",
							"     } catch(e) {\r",
							"         console.log(\"SOME PROBLEM WITH COOKIE ->\" + e);\r",
							"     }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "for test Schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var date = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\":\"object\",\r",
							"    // secify requires properties\r",
							"    \"required\": [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    // describe properties\r",
							"    \"properties\" : {\r",
							"        \"people\": {\"type\":\"int\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"},\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\",function(){\r",
							"    pm.expect(tv4.validate(date,schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "for test Schema Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var date = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\":\"object\",\r",
							"    // secify requires properties\r",
							"    \"required\": [\"name\",\"homeworld\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    // describe properties\r",
							"    \"properties\" : {\r",
							"        \"name\": {\"type\":\"string\"},\r",
							"        \"homeworld\": {\"type\":\"string\"},\r",
							"        \"films\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"species\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\",function(){\r",
							"    pm.expect(tv4.validate(date,schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth2",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		}
	]
}